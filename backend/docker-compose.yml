
services:
  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    container_name: zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
    networks:
      - my_network

  kafka:
    image: confluentinc/cp-kafka:latest
    container_name: kafka
    depends_on:
      - zookeeper
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    networks:
      - my_network

  redis:
    image: redis:latest
    container_name: redis
    restart: always
    networks:
      - my_network

  backend1:
    build: .  
    container_name: backend1
    depends_on:
      - kafka
      - redis
    networks:
      - my_network
    environment:
      NEW_RELIC_LICENSE_KEY: "00baa5b95ba4a9cc5250583ead06f193FFFFNRAL"
      NEW_RELIC_APP_NAME: "webRTC"
      NEW_RELIC_NO_CONFIG_FILE: "true"
      NEW_RELIC_DISTRIBUTED_TRACING_ENABLED: "true"
      NEW_RELIC_LOG: "stdout"

  backend2:
    build: .
    container_name: backend2
    depends_on:
      - kafka
      - redis
    networks:
      - my_network
    environment:
      NEW_RELIC_LICENSE_KEY: "00baa5b95ba4a9cc5250583ead06f193FFFFNRAL"
      NEW_RELIC_APP_NAME: "webRTC"
      NEW_RELIC_NO_CONFIG_FILE: "true"
      NEW_RELIC_DISTRIBUTED_TRACING_ENABLED: "true"
      NEW_RELIC_LOG: "stdout"

  nginx:
    image: nginx:latest
    container_name: nginx
    ports:
      - "80:80"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf
    depends_on:
      - backend1
      - backend2
    networks:
      - my_network
    environment:
      NEW_RELIC_LICENSE_KEY: "00baa5b95ba4a9cc5250583ead06f193FFFFNRAL"
      NEW_RELIC_APP_NAME: "webRTC"
      NEW_RELIC_NO_CONFIG_FILE: "true"
      NEW_RELIC_DISTRIBUTED_TRACING_ENABLED: "true"
      NEW_RELIC_LOG: "stdout"
  


networks:
  my_network:
    driver: bridge
